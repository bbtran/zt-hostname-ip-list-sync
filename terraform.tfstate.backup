{
  "version": 4,
  "terraform_version": "1.5.6",
  "serial": 25,
  "lineage": "3269a4a8-854e-8938-d146-b35e128ec872",
  "outputs": {
    "cron-events-url": {
      "value": "https://dash.cloudflare.com/dbba1cf9c2d1adcbbc1e8ff9dbf91a6a/workers/services/view/zerotrust-hostname-list-sync/production/logs/cron",
      "type": "string"
    },
    "hostname-list-url": {
      "value": "https://one.dash.cloudflare.com/dbba1cf9c2d1adcbbc1e8ff9dbf91a6a/team/lists/a84622fc-3ab6-416a-be9a-e914810d9c7d",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "cloudflare_teams_list",
      "name": "hostnames",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "dbba1cf9c2d1adcbbc1e8ff9dbf91a6a",
            "description": "Hostnames added to this list will create and synchronise IP lists for use in firewall policies.",
            "id": "a84622fc-3ab6-416a-be9a-e914810d9c7d",
            "items": null,
            "name": "Integration: Hostname IP Source List (Do Not Delete)",
            "type": "DOMAIN"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_teams_location",
      "name": "doh",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "dbba1cf9c2d1adcbbc1e8ff9dbf91a6a",
            "anonymized_logs_enabled": false,
            "client_default": false,
            "doh_subdomain": "9zn4vjfnri",
            "ecs_support": false,
            "id": "f6f7640ae57842ceb2824428b2c33f59",
            "ip": "2a06:98c1:54::15:b413",
            "ipv4_destination": "",
            "name": "Integration: Hostname IP Lists DNS-over-HTTPS endpoint (Do Not Delete)",
            "networks": [],
            "policy_ids": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_cron_trigger",
      "name": "hostname-list-sync",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "dbba1cf9c2d1adcbbc1e8ff9dbf91a6a",
            "id": "647ae9c547766f38dca46226c233b648",
            "schedules": [
              "* * * * *"
            ],
            "script_name": "zerotrust-hostname-list-sync"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_teams_list.hostnames",
            "cloudflare_teams_location.doh",
            "cloudflare_worker_script.hostname-list-sync"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "hostname-list-sync",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "dbba1cf9c2d1adcbbc1e8ff9dbf91a6a",
            "analytics_engine_binding": [],
            "compatibility_date": null,
            "compatibility_flags": [],
            "content": "/**\n * Welcome to Cloudflare Workers!\n *\n * This is a template for a Scheduled Worker: a Worker that can run on a\n * configurable interval:\n * https://developers.cloudflare.com/workers/platform/triggers/cron-triggers/\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\n * - Run `npm run deploy` to publish your worker\n *\n * Learn more at https://developers.cloudflare.com/workers/\n */\n\nexport default {\n\t// The scheduled handler is invoked at the interval set in our wrangler.toml's\n\t// [[triggers]] configuration.\n\tasync scheduled(event, env, ctx) {\n\t\t// A Cron Trigger can make requests to other endpoints on the Internet,\n\t\t// publish to a Queue, query a D1 Database, and much more.\n\t\t//\n\t\t// Verify that env variables are present\n\n\t\tconst ACCOUNT_TAG = env.ZT_ACCOUNT_TAG;\n\t\tif (!ACCOUNT_TAG) throw new Error('ZT_ACCOUNT_TAG is required');\n\t\tconst API_BASE_URL = `https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_TAG}`;\n\n\t\tconst DOH_ID = env.DOH_ENDPOINT_ID;\n\t\tif (!DOH_ID) throw new Error('DOH_ENDPOINT_ID is required');\n\n\t\tconst LIST_ID = env.ZT_LIST_ID;\n\t\tif (!LIST_ID) throw new Error('ZT_LIST_ID is required');\n\n\t\tconst CF_ZT_API_TOKEN = env.CF_ZT_API_TOKEN;\n\t\tif (!CF_ZT_API_TOKEN) throw new Error('CF_ZT_API_TOKEN is required');\n\n\t\tconst domainListItems = await getZeroTrustListItems(env, API_BASE_URL, LIST_ID);\n\n\t\tconst domains = domainListItems.map((item) =\u003e item.value);\n\t\tlet wasSuccessful = true;\n\n\t\t// Iterate over domains in list\n\t\tfor (const domain of domains) {\n\t\t\tconst destinationIPList = await getDestinationIPs(domain, DOH_ID);\n\t\t\tif (destinationIPList.length == 0) {\n\t\t\t\twasSuccessful = false;\n\t\t\t\tthrow new Error(`No destination IPs found for ${domain}`);\n\t\t\t}\n\n\t\t\t// Wrap each destination IP in an object in order to construct the payload for the createZeroTrustList request\n\t\t\tconst newIPListItems = destinationIPList.map((item) =\u003e {\n\t\t\t\tconst val = {\n\t\t\t\t\tvalue: item,\n\t\t\t\t};\n\t\t\t\treturn val;\n\t\t\t});\n\n\t\t\tconst newListName = `FQDN: ${domain}`;\n\t\t\tconst data = {\n\t\t\t\tname: newListName,\n\t\t\t\tdescription: `Destination IPs for ${domain}`,\n\t\t\t\titems: newIPListItems,\n\t\t\t\ttype: 'IP',\n\t\t\t};\n\t\t\tconsole.log('Data:', data);\n\t\t\tlet createResp = await createZeroTrustList(env, API_BASE_URL, data);\n\n\t\t\t// Delete and Recreate the list if one already exists. This may add complexity to the Worker\n\t\t\t// TODO: Refactor and optimize\n\t\t\tif (createResp.status == 409) {\n\t\t\t\tconst zeroTrustLists = await listZeroTrustLists(env, API_BASE_URL);\n\t\t\t\t// For now lets filter by name\n\t\t\t\tconst filteredLists = zeroTrustLists.filter((item) =\u003e item.name == newListName);\n\t\t\t\tconst listID = filteredLists[0].id;\n\t\t\t\tif (!listID) {\n\t\t\t\t\tthrow new Error(`Could not find ID for list: ${newListName}`);\n\t\t\t\t}\n\n\t\t\t\tawait deleteZeroTrustList(env, API_BASE_URL, listID);\n\n\t\t\t\tcreateResp = await createZeroTrustList(env, API_BASE_URL, data);\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(`trigger fired at ${event.cron}: ${wasSuccessful}`);\n\t},\n};\n\nasync function listZeroTrustLists(env, baseUrl) {\n\t// Fetch the list of ZT Lists\n\tconst listZTListsReq = new Request(`${baseUrl}/gateway/lists`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\tauthorization: `Bearer ${env.CF_ZT_API_TOKEN}`,\n\t\t},\n\t});\n\tconst listZTListsResp = await fetch(listZTListsReq);\n\tif (!listZTListsResp.ok) throw new Error('Failed to fetch');\n\n\tconst listZTListsRespJson = await listZTListsResp.json();\n\tconsole.log('ListRespJson:', listZTListsRespJson);\n\tconst results = listZTListsRespJson?.result;\n\n\tif (!results || results.length == 0) {\n\t\tthrow new Error('Could not find any Gateway Lists. Exiting...');\n\t}\n\n\treturn results;\n}\n\nasync function getZeroTrustListItems(env, baseUrl, id) {\n\t// Fetch all of the items within the \"RESOLVER_HOSTS\" tagged list\n\tconst getZTListItemsReq = new Request(`${baseUrl}/gateway/lists/${id}/items`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\tauthorization: `Bearer ${env.CF_ZT_API_TOKEN}`,\n\t\t},\n\t});\n\tconst getZTListItemsResp = await fetch(getZTListItemsReq);\n\tif (!getZTListItemsResp.ok) throw new Error('Failed to fetch');\n\n\tconst getZTListItemsRespJson = await getZTListItemsResp.json();\n\tconst results = getZTListItemsRespJson?.result;\n\tconsole.log('Domain Lists:', results);\n\n\tif (!results || results.length == 0) {\n\t\tconsole.log('No domains in list. Exiting...');\n\t\tthrow new Error('No domains in list. Exiting...');\n\t}\n\n\treturn results;\n}\n\nasync function getDestinationIPs(domain, dohId) {\n\t// Fetch Destination IP for domain using the DOH URL\n\tlet dohReqURL = new URL(`https://${dohId}.cloudflare-gateway.com/dns-query`);\n\tdohReqURL.searchParams.set('name', domain);\n\tdohReqURL.searchParams.set('type', 'A');\n\tconsole.log('DOH URL:', dohReqURL);\n\tconst dohReq = new Request(dohReqURL, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\taccept: 'application/dns-json',\n\t\t},\n\t});\n\tconst dohResp = await fetch(dohReq);\n\tif (!dohResp.ok) throw new Error('Failed to fetch');\n\n\tconst dohBody = await dohResp.json();\n\tlet results = dohBody?.Answer;\n\n\tif (!results || results.length == 0) {\n\t\tconsole.log(`No IPs found for ${domain}. Exiting...`);\n\t\tthrow new Error(`No IPs found for ${domain}. Exiting...`);\n\t}\n\n\tresults = results.map(({ data }) =\u003e data);\n\n\treturn results;\n}\n\nasync function createZeroTrustList(env, baseUrl, data) {\n\tconst createZTListReq = new Request(`${baseUrl}/gateway/lists`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\taccept: 'application/json',\n\t\t\tauthorization: `Bearer ${env.CF_ZT_API_TOKEN}`,\n\t\t},\n\t\tbody: JSON.stringify(data),\n\t});\n\tconst createZTListResp = await fetch(createZTListReq);\n\tif (!createZTListResp.ok \u0026\u0026 createZTListResp.status != 409) throw new Error('Failed to create new list');\n\n\treturn createZTListResp;\n}\n\nasync function deleteZeroTrustList(env, baseUrl, id) {\n\tconst deleteZTListReq = new Request(`${baseUrl}/gateway/lists/${id}`, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tauthorization: `Bearer ${env.CF_ZT_API_TOKEN}`,\n\t\t},\n\t});\n\tconst deleteZTListResp = await fetch(deleteZTListReq);\n\tif (!deleteZTListResp.ok) throw new Error('Failed to delete list');\n}\n",
            "d1_database_binding": [],
            "dispatch_namespace": null,
            "id": "zerotrust-hostname-list-sync",
            "kv_namespace_binding": [],
            "logpush": null,
            "module": true,
            "name": "zerotrust-hostname-list-sync",
            "placement": [],
            "plain_text_binding": [
              {
                "name": "DOH_ENDPOINT_ID",
                "text": "9zn4vjfnri"
              },
              {
                "name": "ZT_ACCOUNT_TAG",
                "text": "dbba1cf9c2d1adcbbc1e8ff9dbf91a6a"
              },
              {
                "name": "ZT_LIST_ID",
                "text": "a84622fc-3ab6-416a-be9a-e914810d9c7d"
              }
            ],
            "queue_binding": [],
            "r2_bucket_binding": [],
            "secret_text_binding": [
              {
                "name": "CF_ZT_API_TOKEN",
                "text": "gvz4CVPTJ81pJtJDgmslwSHMPFKZdcogs9hbwyDX"
              }
            ],
            "service_binding": [],
            "tags": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_text_binding"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_teams_list.hostnames",
            "cloudflare_teams_location.doh"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
